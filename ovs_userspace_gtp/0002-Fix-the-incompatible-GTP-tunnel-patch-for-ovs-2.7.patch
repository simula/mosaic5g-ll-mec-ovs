From de200735c14ea4c8dfd43ff47774934090d00c84 Mon Sep 17 00:00:00 2001
From: Anta Huang <anta.huang@eurecom.fr>
Date: Wed, 5 Apr 2017 14:12:38 +0200
Subject: [PATCH 2/3] Fix the incompatible GTP tunnel patch for ovs-2.7

---
 datapath/linux/compat/gtp.c                   | 91 ++++++++++++++++++---------
 datapath/linux/compat/include/linux/if_link.h |  4 +-
 datapath/linux/compat/include/net/gtp.h       |  3 +
 datapath/vport-gtp.c                          | 18 ++----
 4 files changed, 71 insertions(+), 45 deletions(-)

diff --git a/datapath/linux/compat/gtp.c b/datapath/linux/compat/gtp.c
index 4671ec2..daf3010 100644
--- a/datapath/linux/compat/gtp.c
+++ b/datapath/linux/compat/gtp.c
@@ -23,6 +23,7 @@
 #include <linux/module.h>
 #include <linux/rculist.h>
 #include <linux/udp.h>
+#include <linux/etherdevice.h>
 
 #include <net/icmp.h>
 #include <net/ip.h>
@@ -214,7 +215,7 @@ static int gtp_rcv(struct sock *sk, struct sk_buff *skb)
     struct gtphdr *gtph;
     struct iphdr *inner_iph;
     struct metadata_dst *tun_dst;
-#ifndef HAVE_METADATA_DST
+#ifndef USE_UPSTREAM_TUNNEL
     struct metadata_dst temp;
 #endif
     __be64 key;
@@ -225,7 +226,7 @@ static int gtp_rcv(struct sock *sk, struct sk_buff *skb)
     if (unlikely(!dev))
         goto error;
 
-    if (iptunnel_pull_header(skb, GTP_HLEN, 0))
+    if (iptunnel_pull_header(skb, GTP_HLEN, 0, false))
         goto error;
 
     gtph = gtp_hdr(skb);
@@ -233,9 +234,9 @@ static int gtp_rcv(struct sock *sk, struct sk_buff *skb)
     key = cpu_to_be64(ntohl(gtph->teid));
 
     /* Save outer tunnel values */
-#ifndef HAVE_METADATA_DST
+#ifndef USE_UPSTREAM_TUNNEL
     tun_dst = &temp;
-    ovs_udp_tun_rx_dst(&tun_dst->u.tun_info, skb, AF_INET, TUNNEL_KEY, key, 0);
+    ovs_udp_tun_rx_dst(tun_dst, skb, AF_INET, TUNNEL_KEY, key, 0);
 #else
     tun_dst = udp_tun_rx_dst(skb, AF_INET, TUNNEL_KEY, key, 0);
 #endif
@@ -269,6 +270,23 @@ out:
     return 0;
 }
 
+static struct rtable *gtp_get_rt(struct sk_buff *skb,
+                                struct net_device *dev,
+                                struct flowi4 *fl,
+                                const struct ip_tunnel_key *key)
+{
+    struct gtp_dev *gtp_dev = netdev_priv(dev);
+    struct net *net = gtp_dev->net;
+//    struct net *net = dev_net(dev);
+    memset(fl, 0, sizeof(*fl));
+    fl->daddr = key->u.ipv4.dst;
+    fl->saddr = key->u.ipv4.src;
+    fl->flowi4_tos = RT_TOS(key->tos);
+    fl->flowi4_mark = skb->mark;
+    fl->flowi4_proto = IPPROTO_UDP;
+    return ip_route_output_key(net, fl);
+}
+
 netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb)
 {
     struct net_device *dev = skb->dev;
@@ -276,7 +294,7 @@ netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb)
     struct net *net = gtp_dev->net;
     int network_offset = skb_network_offset(skb);
     struct ip_tunnel_info *info;
-    struct ip_tunnel_key *tun_key;
+    struct ip_tunnel_key *key;
     struct rtable *rt;
     int min_headroom;
     __be16 src_port, dst_port;
@@ -296,22 +314,23 @@ netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb)
         goto error;
     }
 
-    tun_key = &info->key;
+    key = &info->key;
 
     /* Route lookup */
-    memset(&fl, 0, sizeof(fl));
-    fl.daddr = tun_key->u.ipv4.dst;
-    fl.saddr = tun_key->u.ipv4.src;
-    fl.flowi4_tos = RT_TOS(tun_key->tos);
-    fl.flowi4_mark = skb->mark;
-    fl.flowi4_proto = IPPROTO_UDP;
-    rt = ip_route_output_key(net, &fl);
+    //memset(&fl, 0, sizeof(fl));
+    //fl.daddr = tun_key->u.ipv4.dst;
+    //fl.saddr = tun_key->u.ipv4.src;
+    //fl.flowi4_tos = RT_TOS(tun_key->tos);
+    //fl.flowi4_mark = skb->mark;
+    //fl.flowi4_proto = IPPROTO_UDP;
+    //rt = ip_route_output_key(net, &fl);
+    rt = gtp_get_rt(skb, dev, &fl, key);
     if (IS_ERR(rt)) {
         err = PTR_ERR(rt);
         goto error;
     }
 
-    min_headroom = LL_RESERVED_SPACE(rt_dst(rt).dev) + rt_dst(rt).header_len
+    min_headroom = LL_RESERVED_SPACE(rt->dst.dev) + rt->dst.header_len
                    + sizeof(struct iphdr) + GTP_HLEN;
 
     if (skb_headroom(skb) < min_headroom || skb_header_cloned(skb)) {
@@ -327,11 +346,10 @@ netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb)
     /* Reset l2 headers. */
     skb_pull(skb, network_offset);
     skb_reset_mac_header(skb);
-    vlan_set_tci(skb, 0);
+    skb->vlan_tci = 0;
 
-    skb = udp_tunnel_handle_offloads(skb, false, 0, false);
-    if (IS_ERR(skb)) {
-        err = PTR_ERR(skb);
+    err = udp_tunnel_handle_offloads(skb, false);
+    if (err) {
         skb = NULL;
         goto err_free_rt;
     }
@@ -339,20 +357,18 @@ netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb)
     src_port = htons(get_src_port(net, skb));
     dst_port = gtp_dev->dst_port;
 
-    gtp_build_header(skb, tun_key);
+    gtp_build_header(skb, key);
 
     skb->ignore_df = 1;
 
     ovs_skb_set_inner_protocol(skb, skb->protocol);
 
-    df = tun_key->tun_flags & TUNNEL_DONT_FRAGMENT ? htons(IP_DF) : 0;
-    err = udp_tunnel_xmit_skb(rt, gtp_dev->sock->sk, skb,
-                              fl.saddr, tun_key->u.ipv4.dst,
-                              tun_key->tos, tun_key->ttl,
-                              df, src_port, dst_port, false, true);
+    df = key->tun_flags & TUNNEL_DONT_FRAGMENT ? htons(IP_DF) : 0;
+    udp_tunnel_xmit_skb(rt, gtp_dev->sock->sk, skb,
+                        fl.saddr, key->u.ipv4.dst,
+                        key->tos, key->ttl,
+                        df, src_port, dst_port, false, true);
 
-    iptunnel_xmit_stats(err, &dev->stats,
-                       (struct pcpu_sw_netstats __percpu *)dev->tstats);
     return NETDEV_TX_OK;
 
 err_free_rt:
@@ -437,7 +453,7 @@ static int gtp_stop(struct net_device *dev)
 
 static netdev_tx_t gtp_dev_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-#ifdef HAVE_METADATA_DST
+#ifdef USE_UPSTREAM_TUNNEL
     return rpl_gtp_xmit(skb);
 #else
     /* Drop All packets coming from networking stack. OVS-CB is
@@ -450,6 +466,24 @@ static netdev_tx_t gtp_dev_xmit(struct sk_buff *skb, struct net_device *dev)
 #endif
 }
 
+int ovs_gtp_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb)
+{
+    struct ip_tunnel_info *info = skb_tunnel_info(skb);
+    struct rtable *rt;
+    struct flowi4 fl4;
+
+    if (ip_tunnel_info_af(info) != AF_INET)
+        return -EINVAL;
+    rt = gtp_get_rt(skb, dev, &fl4, &info->key);
+    if (IS_ERR(rt))
+        return PTR_ERR(rt);
+
+    ip_rt_put(rt);
+    info->key.u.ipv4.src = fl4.saddr;
+    return 0;
+}
+EXPORT_SYMBOL_GPL(ovs_gtp_fill_metadata_dst);
+
 static const struct net_device_ops gtp_netdev_ops = {
 #ifdef HAVE_DEV_TSTATS
     .ndo_init               = gtp_init,
@@ -501,7 +535,7 @@ static void gtp_setup(struct net_device *dev)
     dev->hw_features |= NETIF_F_SG | NETIF_F_HW_CSUM | NETIF_F_RXCSUM;
     dev->hw_features |= NETIF_F_GSO_SOFTWARE;
 #endif
-#ifdef HAVE_METADATA_DST
+#ifdef USE_UPSTREAM_TUNNEL
     netif_keep_dst(dev);
 #endif
     dev->priv_flags |= IFF_LIVE_ADDR_CHANGE | IFF_NO_QUEUE;
@@ -686,7 +720,6 @@ static struct pernet_operations gtp_net_ops = {
     .size = sizeof(struct gtp_net),
 };
 
-DEFINE_COMPAT_PNET_REG_FUNC(device)
 int rpl_gtp_init_module(void)
 {
     int rc;
diff --git a/datapath/linux/compat/include/linux/if_link.h b/datapath/linux/compat/include/linux/if_link.h
index 69fd038..c1a4781 100644
--- a/datapath/linux/compat/include/linux/if_link.h
+++ b/datapath/linux/compat/include/linux/if_link.h
@@ -64,9 +64,9 @@ enum {
 /* GTP section */
 enum {
 	IFLA_GTP_PORT,	/* destination port */
-	__IFLA_GTP_MAX
+    __IFLA_GTP_MAX
 };
-#define IFLA_GTP_MAX	(__IFLA_GTP_MAX - 1)
+#define IFLA_GTP_MAX   (__IFLA_GTP_MAX - 1)
 
 /* VXLAN section */
 enum {
diff --git a/datapath/linux/compat/include/net/gtp.h b/datapath/linux/compat/include/net/gtp.h
index 05623bd..01708c5 100644
--- a/datapath/linux/compat/include/net/gtp.h
+++ b/datapath/linux/compat/include/net/gtp.h
@@ -21,4 +21,7 @@ void rpl_gtp_cleanup_module(void);
 #define gtp_xmit rpl_gtp_xmit
 netdev_tx_t rpl_gtp_xmit(struct sk_buff *skb);
 
+#define gtp_fill_metadata_dst ovs_gtp_fill_metadata_dst
+int ovs_gtp_fill_metadata_dst(struct net_device *dev, struct sk_buff *skb);
+
 #endif /*ifdef__NET_GTP_H */
diff --git a/datapath/vport-gtp.c b/datapath/vport-gtp.c
index 6892b2b..626fdea 100644
--- a/datapath/vport-gtp.c
+++ b/datapath/vport-gtp.c
@@ -52,18 +52,6 @@ static int gtp_get_options(const struct vport *vport,
     return 0;
 }
 
-static int gtp_get_egress_tun_info(struct vport *vport, struct sk_buff *skb,
-                                   struct dp_upcall_info *upcall)
-{
-    struct gtp_port *gtp_port = gtp_vport(vport);
-    struct net *net = ovs_dp_get_net(vport->dp);
-    __be16 dport = htons(gtp_port->port_no);
-    __be16 sport = udp_flow_src_port(net, skb, 1, USHRT_MAX, true);
-
-    return ovs_tunnel_get_egress_info(upcall, ovs_dp_get_net(vport->dp),
-                                      skb, IPPROTO_UDP, sport, dport);
-}
-
 static struct vport *gtp_tnl_create(const struct vport_parms *parms)
 {
     struct net *net = ovs_dp_get_net(parms->dp);
@@ -126,10 +114,12 @@ static struct vport *gtp_create(const struct vport_parms *parms)
 static struct vport_ops ovs_gtp_vport_ops = {
     .type                = OVS_VPORT_TYPE_GTP,
     .create              = gtp_create,
-    .destroy             = ovs_netdev_tunnel_destroy,
     .get_options         = gtp_get_options,
+#ifndef USE_UPSTREAM_TUNNEL
+    .fill_metadata_dst = gtp_fill_metadata_dst,
+#endif
     .send                = gtp_xmit,
-    .get_egress_tun_info = gtp_get_egress_tun_info,
+    .destroy             = ovs_netdev_tunnel_destroy,
 };
 
 static int __init ovs_gtp_tnl_init(void)
-- 
2.7.4

